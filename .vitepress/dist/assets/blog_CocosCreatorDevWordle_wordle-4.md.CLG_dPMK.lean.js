import{_ as a,c as n,a as s,ap as i,o as h,bq as k,br as l,bs as t,bt as p,bu as e}from"./chunks/framework.COLf43Qa.js";const D=JSON.parse('{"title":"cocos creator实现wordle游戏（四）","description":"","frontmatter":{},"headers":[],"relativePath":"blog/CocosCreatorDevWordle/wordle-4.md","filePath":"blog/CocosCreatorDevWordle/wordle-4.md","lastUpdated":1721491738000}'),E={name:"blog/CocosCreatorDevWordle/wordle-4.md"},r=i("",13),d=i("",16),g=i("",25);function y(F,C,c,o,B,A){return h(),n("div",null,[r,s("   scale可以理解为大小，默认为Vec3(1,1,1)也就是原始大小，x代表横轴上的变化，y代表纵轴上的变化，在2d游戏中可以不考虑Z。可以手动设置x,y,z的大小来观察组件在场景编辑器中的变化从而确定在代码中要实现的效果。 {easing : 'backOut'} 代表在大小变化完成时的一个修饰，为了让动画更“圆润”一点，这个设置代表大小变化完了之后有个快速收缩并复原的效果。 所以.to(0.05,{scale : new Vec3(1.03,1.03,1)},{easing : 'backOut'}) 是实现了在0.05秒将节点增大3%,并且完成时有个收缩并复原的效果。 同理： .to(0.05,{scale : new Vec3(1,1,1)}) 实现了在0.05秒内将节点大小还原的效果。 .union() 表示将这两个动作联合在一起， .repeat(2)代表执行两次。 所以结合起来的效果就是btn_middle节点在0.1秒内变大3%又变回去，执行了两次。看上去就是“抖动”了一下。tween缓动组件基本上可以实现传入节点的任意属性的改变，以上图为例，若要改变btn_middle的位置，就在.to中设置position属性即可。 "),d,s("   X代表沿X轴旋转，也就是本游戏的旋转效果。Y代表沿Y轴旋转，效果就像开关门。Z代表沿Z轴旋转，在2d游戏中，Z轴是垂直与屏幕的。旋转的效果就像在平面内原地转圈。 "),g,s(" 此时，你可以不需用在Cocos creator中运行游戏，可以直接在VS Code中按F5运行程序并且可以在代码处设置断点进行调试了。下一篇教程中，我们将完成整个游戏流程的实现。")])}const m=a(E,[["render",y]]);export{D as __pageData,m as default};
